"""
{title}
{title_underbar}

{description}
"""

import logging

from attila.context import automation, auto_context, task, subtask
from attila.exceptions import verify_type


__author__ = '{author}'
__author_email__ = '{author_email}'
__version__ = '0.0'
__url__ = '{url}'
__description__ = '{title}'
__license__ = 'Ericsson Proprietary -- DO NOT DISTRIBUTE'
__long_description__ = __doc__
__package_data__ = {{__name__: ['*.ini']}}
__entry_points__ = {{'console_scripts': [__name__ + ' = ' + __name__ + ':main']}}

# All third-party packages or modules imported by the script should be
# listed here:
__install_requires__ = [
    'attila>=1.3',
    'ericsson_agent_env>=1.4'
]


log = logging.getLogger(__name__)


@automation
def main():
    """
    {indented_description}
    """

    with subtask("Initializing."):
        context = auto_context.current()
        assert isinstance(context, auto_context)

        testing = context.manager.load_option('Main', 'Testing', 'bool', default=False)
        verify_type(testing, bool)
        if testing:
            log.critical("Testing flag is set. No production-affecting actions will be taken.")

        # TODO: Load other parameters here. Remember, you can specify a "loader" for your
        #       parameter, and have it return an actual object rather than just a string.

    # TODO: The actual script body goes here. Remember that you can use
    #       "with task(<description>):" to automatically log task start/end/error events to
    #       the automation event log, and "with subtask(<description>):" to automatically log
    #       start/end/error events to the log file. You can also use
    #       "with task(<description>) as this_task:" and then mark your task (or subtask) as
    #       successfully completed in the event log using "this_task.success(<message>)" or
    #       mark it as failed using "this_task.failure(<message>)".
